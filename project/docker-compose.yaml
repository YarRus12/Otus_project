version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      - kafka_network
      - general_net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks:
      - kafka_network
      - general_net
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    expose:
      - 29092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
      KAFKA_RETENTION_MS: 25920000
      KAFKA_RETENTION_BYTES: 107374182
      KAFKA_SEGMENT_MS: 25920000
      KAFKA_SEGMENT_BYTES: 107374182

  database:
    build:
      context: .  # Указываем контекст сборки
      dockerfile: Dockerfile  # Указываем конкретный Dockerfile
    container_name: database
    environment:
      POSTGRES_DB: docker_app_db
      POSTGRES_USER: docker_app
      POSTGRES_PASSWORD: docker_app
    volumes:
      - ./init:/docker-entrypoint-initdb.d/init
    networks:
      - general_net
    restart: always
    ports:
      - 5435:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "docker_app" ]
      interval: 5s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1

  db_init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    networks:
      - kafka_network
      - general_net
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic new_data --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic requests --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic answers --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  producer_emulator:
    build:
      context: ./
      dockerfile: ./producer_emulator/Dockerfile
    container_name: producer_emulator
    depends_on:
      - database
      - kafka
    networks:
      - general_net
      - kafka_network
    ports:
      - "8081:8081"
    environment:
      FLASK_APP: producer_emulator.py
      FLASK_RUN_PORT: 8081
      FLASK_RUN_HOST: 0.0.0.0
      FLASK_ENV: development
      FLASK_APP_DIR: /app
      HOST: database
      PORT: 5435
      DB: docker_app_db
      DB_USERNAME: docker_app
      POSTGRES_PASSWORD: docker_app
    healthcheck:
      test: [ "CMD", "curl", "localhost:8081/status" ]
      interval: 5s
      timeout: 5s
      retries: 3
    command: ["sh", "-c", "ls -l /app && ls -l /app/utils.py && flask run --host=0.0.0.0"]

#  data_loader:
#    build:
#      context: ./
#      dockerfile: ./data_loader/Dockerfile
#    container_name: data_loader
#    depends_on:
#      - database
#      - kafka
#    networks:
#      - general_net
#      - kafka_network
#    ports:
#      - "8082:8082"
#    environment:
#      FLASK_APP: data_loader.py
#      FLASK_RUN_PORT: 8082
#      FLASK_RUN_HOST: 0.0.0.0
#      FLASK_ENV: development
#      FLASK_APP_DIR: /app
#      HOST: database
#      PORT: 5435
#      DB: docker_app_db
#      DB_USERNAME: docker_app
#      POSTGRES_PASSWORD: docker_app
#    healthcheck:
#      test: [ "CMD", "curl", "localhost:8082/status" ]
#      interval: 5s
#      timeout: 5s
#      retries: 3
#    command: [ "sh", "-c", "ls -l /app && ls -l /app/utils.py && flask run --host=0.0.0.0" ]
#
#  model_application:
#    build:
#      context: ./
#      dockerfile: ./model_application/Dockerfile
#    container_name: model_application
#    depends_on:
#      - database
#      - kafka
#    networks:
#      - general_net
#      - kafka_network
#    ports:
#      - "8083:8083"
#    environment:
#      FLASK_APP: model_application.py
#      FLASK_RUN_PORT: 8083
#      FLASK_RUN_HOST: 0.0.0.0
#      FLASK_ENV: development
#      FLASK_APP_DIR: /app
#      HOST: database
#      PORT: 5435
#      DB: docker_app_db
#      DB_USERNAME: docker_app
#      POSTGRES_PASSWORD: docker_app
#    healthcheck:
#      test: [ "CMD", "curl", "localhost:8083/status" ]
#      interval: 5s
#      timeout: 5s
#      retries: 3
#    command: [ "sh", "-c", "ls -l /app && ls -l /app/utils.py && flask run --host=0.0.0.0" ]

networks:
  general_net:
    name: general_net
  kafka_network:
    name: kafka_network

volumes:
  db_stage: {}